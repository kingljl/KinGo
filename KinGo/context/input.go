package context

import (
	"net/http"
	"reflect"
	"strings"
)

type YafInput struct {
	Params        map[string]string
	Data          map[interface{}]interface{} // store some values in this context when calling context in filter or controller.
	Request       *http.Request
	RequestBody   []byte
	RunController reflect.Type
	RunMethod     string
}

// NewInput return BeegoInput generated by http.Request.
func NewInput(req *http.Request) *YafInput {
	return &YafInput{
		Params:  make(map[string]string),
		Data:    make(map[interface{}]interface{}),
		Request: req,
	}
}
// Protocol returns request protocol name, such as HTTP/1.1 .
func (input *YafInput) Protocol() string {
	return input.Request.Proto
}
// Url returns request url path (without query string, fragment).
func (input *YafInput) Url() string {
	return input.Request.URL.String()
}
// Site returns base site url as scheme://domain type.
func (input *YafInput) Site() string {
	return input.Scheme() + "://" + input.Domain()
}
// Scheme returns request scheme as "http" or "https".
func (input *YafInput) Scheme() string {
	if input.Request.URL.Scheme != "" {
		return input.Request.URL.Scheme
	} else if input.Request.TLS == nil {
		return "http"
	} else {
		return "https"
	}
}
// Domain returns host name.
// Alias of Host method.
func (input *YafInput) Domain() string {
	return input.Request.URL.Host;
}
// Method returns http request method.
func (input *YafInput) Method() string {
	return input.Request.Method
}

// Is returns boolean of this request is on given method, such as Is("POST").
func (input *YafInput) Is(method string) bool {
	return input.Method() == method
}
// IsAjax returns boolean of this request is generated by ajax.
func (input *YafInput) IsAjax() bool {
	return input.Header("X-Requested-With") == "XMLHttpRequest"
}

// IsSecure returns boolean of whether file uploads in this request or not..
func (input *YafInput) IsUpload() bool {
	return strings.Contains(input.Header("Content-Type"), "multipart/form-data")
}
// Refer returns http referer header.
func (input *YafInput) Refer() string {
	return input.Header("Referer")
}
func (input *YafInput) Param(key string) string {
	if v, ok := input.Params[key]; ok {
		return v
	}
	return ""
}
// Query returns input data item string by a given string.
func (input *YafInput) Query(key string) string {
	if val := input.Param(key); val != "" {
		return val
	}
	if input.Request.Form == nil {
		input.Request.ParseForm()
	}
	return input.Request.Form.Get(key)
}
// Header returns request header item string by a given string.
func (input *YafInput) Header(key string) string {
	return input.Request.Header.Get(key)
}
// GetData returns the stored data in this context.
func (input *YafInput) GetData(key interface{}) interface{} {
	if v, ok := input.Data[key]; ok {
		return v
	}
	return nil
}

// SetData stores data with given key in this context.
// This data are only available in this context.
func (input *YafInput) SetData(key, val interface{}) {
	input.Data[key] = val
}

